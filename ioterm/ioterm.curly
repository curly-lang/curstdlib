module IO::Term
    (
      putch : Char -> enum Ok
      getch :         Char
      cols  :         Int
      rows  :         Int
    )

import Math

@impure
extern "__curly_prim__putch"
__prim__putch : Char -> enum Ok

@impure
putch c: Char = __prim__putch c


@impure
extern "__curly_prim__getch"
__prim__getch : Char

@impure
getch = __prim__getch



@impure
extern "__curly_prim__cols"
__prim__cols : Int

@impure
cols = __prim__cols


@impure
extern "__curly_prim__rows"
__prim__rows : Int

@impure
rows = __prim__rows



@pure
extern "curly_prim__chr"
__prim__chr : Int -> Char

@pure
int2Char i: Int = __prim__chr i


@impure
putDig d: Int = putch $ chr ((d + 48) % 10)



@impure
putInt int: Int =
  if int <= 0 then
    (
      putch '-';
      putInt (-int)
    )
  else
    if int < 10 then
      putDig int
    else
      let mpt = (Math::maxPow10 int)
          msd = Math::floor (int / mpt)
      in (
        putDig msd;
        putInt (int % mpt)
      )
