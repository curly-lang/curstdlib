module Temp::IO::Term
  (
    input :                 String
    print : StringChar   -> enum Ok
  )

import IO::Term as IOTerm
import Temp::Cons_Boxes as Cons


type StringChar = Char | String
type String = (StringChar -> StringChar -> StringChar) -> StringChar


@impure
_input acc: StringChar =
  let c = IOTerm::getch
  in
    if c == '\n' then
      acc
    else
      _input $ Cons::cons_S c acc

@impure
input = Cons::reverse $ Cons::toString $ _input '\0'


@impure
print m: StringChar = match m
  to c: Char   => (
    IOTerm::putch c;
    IOTerm::putch '\n'
  )

  to s: String => (
    IOTerm::putch $ Cons::toChar $ Cons::car_S s;
    print $ Cons::cdr_S m
  )
