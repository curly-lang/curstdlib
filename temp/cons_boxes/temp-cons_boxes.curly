module Temp::Cons_Boxes
  (
    cons_S      : StringChar -> StringChar -> (StringChar -> StringChar -> StringChar)    -> StringChar  ,
    car_S       : StringChar                                                              -> StringChar  ,
    cdr_S       : StringChar                                                              -> StringChar  ,
    reverse     : String                                                                  -> String      ,
    c_to_cons   : ptr String                                                              -> String      ,
    cons_to_c   : String                                                                  -> ptr String  ,
    free        : ptr String                                                              -> enum Ok     ,
    toChar      : StringChar                                                              -> Char        ,
    toString    : StringChar                                                              -> String      ,
    length      : StringChar                                                              -> Word
  )


type StringChar = Char | String
type String = (StringChar -> StringChar -> StringChar) -> StringChar

cons_S x: StringChar, y: StringChar, f: StringChar -> StringChar -> StringChar = f x y

truefn_S  x: StringChar, y: StringChar = x
falsefn_S x: StringChar, y: StringChar = y

car_S str: StringChar = match str
  to s: String => s truefn_S
cdr_S str: StringChar = match str
  to s: String => s falsefn_S


reverse_tail acc: String, str: StringChar = match str
  to s: String => reverse_tail (cons_S (car_S s) acc) (cdr_S s)
  to c: Char   => acc

reverse str: String = reverse_tail (cons_S (car_S str) '\0') (cdr_S str)

length_tail acc: Word, str: StringChar =
  match str
  to String => length_tail (acc + 1u) $ cdr_S str
  to Char => acc

length = length_tail 0u

@pure
extern "__curly_prim__getc"
__prim__getc : ptr String -> Word -> Char

gets acc: StringChar, i: Word, p: ptr String =
  let c = __prim__getc p i
  in if c == '\0' then
    acc
  else
    gets (cons_S c acc) (i + 1u) p

c_to_cons p: ptr String =
  let v = gets '\0' 0u p
  in match v
  to v: String => reverse v

@pure
extern "__curly_prim__str_with_cap"
__prim__with_cap : Word -> ptr String

@pure
extern "__curly_prim__setc"
__prim__setc : ptr String -> Word -> Char -> enum Ok

setc acc: StringChar, i: Word, p: ptr String =
  match acc
  to String => (
    __prim__setc p i (match car_S acc to c: Char => c);
    setc (cdr_S acc) (i + 1u) p
  )
  to Char => p

cons_to_c str: String =
  let v = __prim__with_cap $ length str
  in setc str 0u v

@pure
extern "__curly_prim__free"
__prim__free : ptr String -> enum Ok
free str: ptr String = __prim__free str


@pure
toChar   c: StringChar = match c : Char | String
  to char: Char   => char
  to str : String => toChar $ car_S str


@pure
toString c: StringChar = match c
  to char: Char   => toString $ cons_S char '\0'
  to str : String => str
