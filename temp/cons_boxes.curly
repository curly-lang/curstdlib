module Temp::Cons_Boxes
  (
    cons_S      : StringChar -> StringChar -> (StringChar -> StringChar -> StringChar)    -> StringChar  ,
    car_S       : StringChar                                                              -> StringChar  ,
    cdr_S       : StringChar                                                              -> StringChar  ,
    reverse     : String                                                                  -> String      ,
    c_to_cons   : ptr String                                                              -> String
  )


type StringChar = Char | ((StringChar -> StringChar -> StringChar) -> StringChar)
type String = (StringChar -> StringChar -> StringChar) -> StringChar

cons_S x: StringChar, y: StringChar, f: StringChar -> StringChar -> StringChar = f x y

truefn_S  x: StringChar, y: StringChar = x
falsefn_S x: StringChar, y: StringChar = y

car_S str: StringChar = match str
    to s: String => s truefn_S
cdr_S str: StringChar = match str
    to s: String => s falsefn_S


reverse_tail acc: String, str: StringChar = match str
  to s: String => reverse_tail (cons_S (car_S s) acc) (cdr_S s)
  to c: Char   => acc

reverse str: String = reverse_tail (cons_S (car_S str) '\0') (cdr_S str)

@pure
extern "__curly_prim__getc"
__prim__getc : ptr String -> Word -> Char

gets acc: StringChar, i: Word, p: ptr String =
    let c = __prim__getc p i
    in if c == '\0' then
        acc
    else
        gets (cons_S c acc) (i + 1u) p

c_to_cons p: ptr String =
    let v = gets '\0' 0u p
    in match v
    to v: String => reverse v

