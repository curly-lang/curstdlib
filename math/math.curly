module Math
  (
    maxPow2     : Int | Float                   -> Int         ,
    maxPow10    : Int | Float                   -> Int         ,
    abs         : Int | Float                   -> Int | Float ,
    floor       : Int | Float                   -> Int         ,
    sqrt        : Int | Float                   -> Float       ,
    pow         : Int | Float -> Int | Float    -> Int | Float ,
    root        : Int | Float -> Int            -> Float       ,
    removeWhole : Float                         -> Float       ,
    nlogn       : Float       -> Float          -> Float       
  )





# (power of 2)th root of a number
rtPow2 num:Int | Float, root:Int =
  if root == 1 then
    match num
      to n: Float => n
      to i: Int   => i * 1.0
  else
    rtPow2 (sqrt num) (root / 2)




# smallest power of 2 so that the product of that power of 2 and a number is >= 1
minDivNumPow2 num:Float, guess:Int =
  if num * guess >= 1 then
    guess
  else
    minDivNumPow2 num (guess * 2)


_maxExpN x: Float, n: Float, currPowN: Float, currExpN: Int =
  if n * currPowN > x then
    currExpN
  else
    _maxExpN x n (currPowN * n) (currExpN + 1)

maxPowN x: Float, n: Float = _maxExpN x n 1.0 0



# recursive Int maxPow2
_maxPow2_Int   x: Int,   currPow2: Int =
  if currPow2 * 2 > x then
    currPow2
  else
    _maxPow2_Int   x (currPow2 * 2)

# recursive Float maxPow2
_maxPow2_Float x: Float, currPow2: Int =
  if currPow2 * 2 > x then
    currPow2
  else
    _maxPow2_Float x (currPow2 * 2)

# Int | Float and recursive handler for maxPow2 (largest power of 2 <= a number)
maxPow2 num: Int | Float = match num : Int | Float
  to num_I: Int   => _maxPow2_Int   num_I 1
  to num_F: Float => _maxPow2_Float num_F 1




# recursive Int maxPow10
_maxPow10_Int   x: Int,   currPow10: Int =
  if currPow10 * 10 > x then
    currPow10
  else
    _maxPow10_Int   x (currPow10 * 10)

# recursive Float maxPow10
_maxPow10_Float x: Float, currPow10: Int =
  if currPow10 * 10 > x then
    currPow10
  else
    _maxPow10_Float x (currPow10 * 10)


# Int | Float and recursive handler for maxPow10 (largest power of 10 <= a number)
maxPow10 num: Int | Float = match num : Int | Float
  to num_I: Int   => _maxPow10_Int   num_I 1
  to num_F: Float => _maxPow10_Float num_F 1




# Int abs
_abs_Int   x: Int   =
  if x > 0 then
    x
  else
    (0-x)

# Float abs
_abs_Float x: Float =
  if x > 0 then
    x
  else
    (0-x)


# Int | Float handler for abs
abs num: Int | Float = match num : Int | Float
  to num_I: Int   => _abs_Int   num_I
  to num_F: Float => _abs_Float num_F




# recursive Int floor
_floor_Int   numIn: Int,   numOut: Int =
  if 0 <= numIn and numIn < 1 then
    numOut
  else
    if numIn > 0 then (
      maxPow    := maxPow2 (abs numIn);
      newNumIn  := numIn - maxPow;
      newNumOut := numOut + maxPow;
      _floor_Int   newNumIn newNumOut
    )
    else (
      maxPow    := maxPow2 (abs numIn);
      newNumIn  := numIn + maxPow;
      newNumOut := numOut - maxPow;
      _floor_Int   newNumIn newNumOut
    )

# recursive Float floor
_floor_Float numIn: Float, numOut: Int =
  if 0 <= numIn and numIn < 1 then
    numOut
  else
    if numIn > 0 then (
      maxPow    := maxPow2 (abs numIn);
      newNumIn  := numIn - maxPow;
      newNumOut := numOut + maxPow;
      _floor_Float newNumIn newNumOut
    )
    else (
      maxPow    := maxPow2 (abs numIn);
      newNumIn  := numIn + maxPow;
      newNumOut := numOut - maxPow;
      _floor_Float newNumIn newNumOut
    )

# Int | Float and recursive handler for floor
floor num: Int | Float = match num : Int | Float
  to num_I: Int   => _floor_Int   num_I 0
  to num_F: Float => _floor_Float num_F 0




# recursive Int sqrt
_sqrt_Int   num: Int,   guess: Float = (
  maxError  := (num * 0.000000000001);
  currDiff  := guess * guess - num;
  currError := _abs_Float currDiff; 
  if currError < maxError then
    guess
  else (
    guess2 := num / guess;
    average := (guess + guess2) / 2;
    _sqrt_Int num average
  )
)

# recursive Float sqrt
_sqrt_Float num: Float, guess: Float = (
  maxError  := (num * 0.000000000001);
  currDiff  := guess * guess - num;
  currError := _abs_Float currDiff; 
  if currError < maxError then
    guess
  else (
    guess2 := num / guess;
    average := (guess + guess2) / 2;
    _sqrt_Float num average
  )
)


# Int | Float and recursive handler for sqrt
sqrt num: Int | Float = match num : Int | Float
  to num_I: Int   => _sqrt_Int   num_I 1.0
  to num_F: Float => _sqrt_Float num_F 1.0




# Int, Int pow
_pow_Int_Int_tail     b: Int,   e: Int,   c: Int   =
  if e <= 0 then
    c
  else (
    newC := c * b;
    newE := e - 1;
    _pow_Int_Int_tail     b newE newC
  )

# Int, Float pow
_pow_Int_Float_tail   b: Int,   e: Float, c: Float  =
  if e < 1 then
    if e <= 0.00001 then
      c
    else (
      minDivNum := minDivNumPow2 e 1;
      amtToMult := rtPow2 b minDivNum;
      newC      := c * amtToMult;
      amtToSub  := 1.0 / minDivNum;
      newE      := e - amtToSub;
      _pow_Int_Float_tail   b newE newC
    )
  else (
    newC := c * b;
    newE := e - 1;
    _pow_Int_Float_tail   b newE newC
  )

# Float, Int pow
_pow_Float_Int_tail   b: Float, e: Int,   c: Float =
  if e <= 0 then
    c
  else (
    newC := c * b;
    newE := e - 1;
    _pow_Float_Int_tail   b newE newC
  )

# Float, Float pow
_pow_Float_Float_tail b: Float, e: Float, c: Float =
  if e < 1 then
    if e <= 0.00001 then
      c
    else (
      minDivNum := minDivNumPow2 e 1;
      amtToMult := rtPow2 b minDivNum;
      newC      := c * amtToMult;
      amtToSub  := 1.0 / minDivNum;
      newE      := e - amtToSub;
      _pow_Float_Float_tail b newE newC
    )
  else (
    newC := c * b;
    newE := e - 1;
    _pow_Float_Float_tail b newE newC
  )


_pow_Int_Int     b: Int,   e: Int   = _pow_Int_Int_tail     b e 1
_pow_Int_Float   b: Int,   e: Float = _pow_Int_Float_tail   b e 1.0
_pow_Float_Int   b: Float, e: Int   = _pow_Float_Int_tail   b e 1.0
_pow_Float_Float b: Float, e: Float = _pow_Float_Float_tail b e 1.0



# Int, Int | Float handler for pow
_pow_Int_   base_I: Int,   exponent: Int | Float = match exponent : Int | Float
  to exp_I: Int    => _pow_Int_Int     base_I exp_I
  to exp_F: Float  => _pow_Int_Float   base_I exp_F

# Float, Int | Float handler for pow
_pow_Float_ base_F: Float, exponent: Int | Float = match exponent : Int | Float
  to exp_I: Int    => _pow_Float_Int   base_F exp_I
  to exp_F: Float  => _pow_Float_Float base_F exp_F


# Int | Float, Int | Float handler for pow
pow base: Int | Float, exponent: Int | Float = match base : Int | Float
  to base_I: Int   => _pow_Int_   base_I exponent
  to base_F: Float => _pow_Float_ base_F exponent




# recursive Int root
_root_Int   num: Int,   root: Int, guess: Float = (
  diff      := (_pow_Float_Int guess root) - num;
  absDiff   := _abs_Float diff;
  targetAcc := num * 0.000000000001;
  
  if absDiff < targetAcc then
    guess
  else (
    nMinOneX := guess * (root - 1);
    den      := _pow_Float_Int guess (root - 1);
    frac     := num / den;
    paren    := nMinOneX + frac;
    newGuess := paren / root;
    _root_Int   num root newGuess
  )
)

# recursive Float root
_root_Float num: Float, root: Int, guess: Float = (
  diff      := (_pow_Float_Int guess root) - num;
  absDiff   := _abs_Float diff;
  targetAcc := num * 0.000000000001;

  if absDiff < targetAcc then
    guess
  else (
    nMinOneX := guess * (root - 1);
    den      := _pow_Float_Int guess (root - 1);
    frac     := num / den;
    paren    := nMinOneX + frac;
    newGuess := paren / root;
    _root_Float num root newGuess
  )
)


# Int | Float and recursive handler for root
root num: Int | Float, root: Int = match num : Int | Float
  to num_I: Int   => _root_Int   num_I root 1.0
  to num_F: Float => _root_Float num_F root 1.0




# Removes the whole part of a number, only leaving the decimal
removeWhole float: Float =
  if float > 0 then
    float - floor   float
  else
    float + floor (-float)


_nlogn num: Float, base: Float, currGuess: Float, place: Int, origNum: Float = 
  if place > (200 / base) then
    currGuess
  else (
    n := maxPowN num base;

    placeMult := 1 / (_pow_Float_Int base place);
    guessAdd := n * placeMult;
    newGuess := currGuess + guessAdd;

    baseToN := _pow_Float_Int base n;
    quo := num / baseToN;
    newNum := _pow_Float_Float quo base;

    _nlogn newNum base newGuess (place + 1) origNum
  )


nlogn num: Float, base: Float = (
  n := maxPowN num base;

  baseToN := _pow_Float_Int base n;
  quo := num / baseToN;
  newNum := _pow_Float_Float quo base;

  _nlogn newNum base (n + 0.0) 1 num
)
